# -*- coding: utf-8 -*-
"""Irish FLower_datasets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NUMWwEyAqAAkEDly4HnxoQio02AZt-95
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

#important library for machine learning
import sklearn

from sklearn import datasets

iris = datasets.load_iris()

df = pd.DataFrame(iris.data,columns=iris.feature_names)
df['class']= iris.target

#show df(DataFrame)
df

x= df.drop('class',axis=1)
y= df['class']

x   #show x which contain others value except class

#for train x to machine split x and y
from sklearn.model_selection import train_test_split

#spliting x, y and keep 25% data(as 0.25 showed) for test and train other 75% randomizely
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.25,random_state=5)

#find the shortest value as neighbor by algorithm
from sklearn.neighbors import KNeighborsClassifier

#take odd value sothat we easily find conclusion
knn = KNeighborsClassifier(n_neighbors=3)

#train x and their corresponding y
knn.fit(xtrain,ytrain)

#test or predict y value
ypred= knn.predict(xtest)
ypred

ytest

#import accuracy library
from sklearn.metrics import accuracy_score

#test accuracy percentage and show
accuracy = accuracy_score(ytest,ypred)
accuracy

"""Logistic Regression"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score

data = load_iris()

x,y = data.data,data.target
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.35,random_state=42)

log_reg = LogisticRegression(max_iter=200)
log_reg.fit(xtrain,ytrain)

ypred = log_reg.predict(xtest)

accurecy = accuracy_score(ytest,ypred)
accurecy

"""Naive Bayes

"""

from sklearn.naive_bayes import GaussianNB

daata = load_iris()
x,y = data.data,data.target
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.3,random_state=42)

nb = GaussianNB()
nb.fit(xtrain,ytrain)
y_pred = nb.predict(xtest)

accuracy = accuracy_score(ytest,y_pred)
accuracy

"""Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
data = load_iris()

x,y = data.data,data.target
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.32,random_state=5)

rf = RandomForestClassifier(n_estimators=100,random_state=5)
rf.fit(xtrain,ytrain)

y_pred = rf.predict(xtest)

accuracy = accuracy_score(ytest,y_pred)
accuracy

"""Ada Boost"""

from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
data = load_iris()

x,y = data.data,data.target
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.23,random_state=2)

base_estimator = DecisionTreeClassifier(max_depth=1)
ada_boost = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), n_estimators=50)
ada_boost.fit(xtrain,ytrain)

y_pred = ada_boost.predict(xtest)

accuracy = accuracy_score(ytest,y_pred)
accuracy